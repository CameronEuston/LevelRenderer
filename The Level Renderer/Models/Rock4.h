// "Rock4.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Rock4.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Rock4_version_
const char Rock4_version[4] = { '0','1','9','d' };
#define _Rock4_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Rock4_vertexcount_
const unsigned Rock4_vertexcount = 54;
#define _Rock4_vertexcount_
#endif
#ifndef _Rock4_indexcount_
const unsigned Rock4_indexcount = 60;
#define _Rock4_indexcount_
#endif
#ifndef _Rock4_materialcount_
const unsigned Rock4_materialcount = 1; // can be used for batched draws
#define _Rock4_materialcount_
#endif
#ifndef _Rock4_meshcount_
const unsigned Rock4_meshcount = 1;
#define _Rock4_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Rock4_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Rock4_vertices[54] =
{
	{	{ 0.028166f, -0.156922f, -0.426593f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.237000f, 0.593400f, -0.769200f }	},
	{	{ -0.128615f, 0.346984f, -0.086137f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.237000f, 0.593400f, -0.769200f }	},
	{	{ 0.295491f, 0.171465f, -0.090860f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.237000f, 0.593400f, -0.769200f }	},
	{	{ 0.295491f, 0.171465f, -0.090860f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.696300f, 0.150600f, -0.701800f }	},
	{	{ 0.357067f, -0.153970f, -0.099617f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.696300f, 0.150600f, -0.701800f }	},
	{	{ 0.028166f, -0.156922f, -0.426593f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.696300f, 0.150600f, -0.701800f }	},
	{	{ 0.028166f, -0.156922f, -0.426593f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.524200f, 0.358700f, -0.772400f }	},
	{	{ -0.446947f, -0.146737f, -0.099423f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.524200f, 0.358700f, -0.772400f }	},
	{	{ -0.128615f, 0.346984f, -0.086137f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.524200f, 0.358700f, -0.772400f }	},
	{	{ 0.028166f, -0.156922f, -0.426593f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.010700f, -0.999800f, 0.015000f }	},
	{	{ -0.120260f, -0.150425f, -0.099522f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007800f, -0.999800f, 0.016300f }	},
	{	{ -0.446947f, -0.146737f, -0.099423f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999800f, 0.014700f }	},
	{	{ 0.357067f, -0.153970f, -0.099617f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -0.999800f, 0.016500f }	},
	{	{ 0.295491f, 0.171465f, -0.090860f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.930300f, 0.184500f, -0.317100f }	},
	{	{ 0.403709f, 0.077407f, 0.171883f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.930300f, 0.184500f, -0.317100f }	},
	{	{ 0.357067f, -0.153970f, -0.099617f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.930300f, 0.184500f, -0.317100f }	},
	{	{ -0.128615f, 0.346984f, -0.086137f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382500f, 0.923600f, 0.024200f }	},
	{	{ 0.098577f, 0.245770f, 0.185815f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382500f, 0.923600f, 0.024200f }	},
	{	{ 0.295491f, 0.171465f, -0.090860f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382500f, 0.923600f, 0.024200f }	},
	{	{ -0.446947f, -0.146737f, -0.099423f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.836100f, 0.541500f, -0.088000f }	},
	{	{ -0.175526f, 0.298502f, 0.061200f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.836100f, 0.541500f, -0.088000f }	},
	{	{ -0.128615f, 0.346984f, -0.086137f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.836100f, 0.541500f, -0.088000f }	},
	{	{ -0.120260f, -0.150425f, -0.099522f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.009200f, -0.999800f, -0.017600f }	},
	{	{ -0.354634f, -0.152324f, 0.165701f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008700f, -0.999900f, -0.014800f }	},
	{	{ -0.446947f, -0.146737f, -0.099423f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011300f, -0.999800f, -0.017100f }	},
	{	{ 0.357067f, -0.153970f, -0.099617f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007400f, -0.999800f, -0.016200f }	},
	{	{ 0.262684f, -0.157558f, 0.165560f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008400f, -0.999900f, -0.014800f }	},
	{	{ 0.295491f, 0.171465f, -0.090860f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.484000f, 0.868000f, 0.111400f }	},
	{	{ 0.098577f, 0.245770f, 0.185815f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.484000f, 0.868000f, 0.111400f }	},
	{	{ 0.403709f, 0.077407f, 0.171883f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.484000f, 0.868000f, 0.111400f }	},
	{	{ -0.128615f, 0.346984f, -0.086137f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.035400f, 0.945900f, 0.322500f }	},
	{	{ -0.175526f, 0.298502f, 0.061200f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.035400f, 0.945900f, 0.322500f }	},
	{	{ 0.098577f, 0.245770f, 0.185815f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.035400f, 0.945900f, 0.322500f }	},
	{	{ -0.446947f, -0.146737f, -0.099423f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.857800f, 0.412000f, 0.307300f }	},
	{	{ -0.354634f, -0.152324f, 0.165701f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.857800f, 0.412000f, 0.307300f }	},
	{	{ -0.175526f, 0.298502f, 0.061200f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.857800f, 0.412000f, 0.307300f }	},
	{	{ 0.357067f, -0.153970f, -0.099617f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.818600f, -0.499000f, 0.284600f }	},
	{	{ 0.403709f, 0.077407f, 0.171883f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.818600f, -0.499000f, 0.284600f }	},
	{	{ 0.262684f, -0.157558f, 0.165560f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.818600f, -0.499000f, 0.284600f }	},
	{	{ 0.098577f, 0.245770f, 0.185815f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.265000f, 0.407900f, 0.873700f }	},
	{	{ 0.018272f, -0.153004f, 0.396347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.265000f, 0.407900f, 0.873700f }	},
	{	{ 0.403709f, 0.077407f, 0.171883f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.265000f, 0.407900f, 0.873700f }	},
	{	{ -0.175526f, 0.298502f, 0.061200f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.280200f, 0.491700f, 0.824400f }	},
	{	{ 0.018272f, -0.153004f, 0.396347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.280200f, 0.491700f, 0.824400f }	},
	{	{ 0.098577f, 0.245770f, 0.185815f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.280200f, 0.491700f, 0.824400f }	},
	{	{ -0.354634f, -0.152324f, 0.165701f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.486900f, 0.376200f, 0.788300f }	},
	{	{ 0.018272f, -0.153004f, 0.396347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.486900f, 0.376200f, 0.788300f }	},
	{	{ -0.175526f, 0.298502f, 0.061200f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.486900f, 0.376200f, 0.788300f }	},
	{	{ 0.262684f, -0.157558f, 0.165560f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999900f, 0.010800f }	},
	{	{ 0.018272f, -0.153004f, 0.396347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999900f, 0.010800f }	},
	{	{ -0.354634f, -0.152324f, 0.165701f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008500f, -0.999900f, 0.010800f }	},
	{	{ 0.403709f, 0.077407f, 0.171883f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.627000f, -0.394400f, 0.671800f }	},
	{	{ 0.018272f, -0.153004f, 0.396347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.627000f, -0.394400f, 0.671800f }	},
	{	{ 0.262684f, -0.157558f, 0.165560f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.627000f, -0.394400f, 0.671800f }	},
};
#define _Rock4_vertices_
#endif
#ifndef _Rock4_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Rock4_indices[60] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 9, 12, 10,
	 13, 14, 15,
	 16, 17, 18,
	 19, 20, 21,
	 22, 23, 24,
	 25, 26, 22,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 22, 26, 23,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
};
#define _Rock4_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Rock4_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Rock4_materials[1] =
{
	{
		{{ 0.287072f, 0.287072f, 0.287072f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078423f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Rock.014",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Rock4_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Rock4_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Rock4_batches[1][2] =
{
	{ 60, 0 },
};
#define _Rock4_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Rock4_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Rock4_meshes[1] =
{
	{
		"default",
		60,
		0,
		0,
	},
};
#define _Rock4_meshes_
#endif
